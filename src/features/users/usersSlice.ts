import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Post } from '../../app/models/users/post';
import { User } from '../../app/models/users/user';
import { RootState, AppThunk } from '../../app/store';
import { fetchPosts } from './usersAPI';

export interface usersState {
    users: Array<User>;
    posts: Array<Post>;
    userPosts: Array<Post>;
    SelectedUser: User | null;
    isLoading: boolean;
}

const initialState: usersState = {
    users: [],
    posts: [],
    userPosts: [],
    SelectedUser: null,
    isLoading: true,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPostsThunk: any = createAsyncThunk(
    'posts/fetchPosts',
    async ({ page, limit }: { page: number, limit: number }) => {
        const response = await fetchPosts({ page, limit });
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
)

export const usersSlice = createSlice({
    name: 'users',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setIsLoading: (state, action: PayloadAction<boolean>) => {
            state.isLoading = action.payload;
        },
        setPostsList: (state, action: PayloadAction<Array<Post>>) => {
            state.posts = action.payload;
            state.isLoading = false;
        },
        setUsersList: (state, action: PayloadAction<Array<User>>) => {
            state.users = action.payload;
        },
        setPostCommentsList: (state, action: PayloadAction<Array<Post>>) => {
            state.posts = action.payload;
        },
        setUserPostsList: (state, action: PayloadAction<Array<Post>>) => {
            state.userPosts = action.payload;
        },
        // increment: (state) => {
        //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //     // doesn't actually mutate the state because it uses the Immer library,
        //     // which detects changes to a "draft state" and produces a brand new
        //     // immutable state based off those changes
        //     state.value += 1;
        // },
        // decrement: (state) => {
        //     state.value -= 1;
        // },
        // // Use the PayloadAction type to declare the contents of `action.payload`
        // incrementByAmount: (state, action: PayloadAction<number>) => {
        //     state.value += action.payload;
        // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: {
        [fetchPostsThunk.fulfilled]: (state: usersState, action: PayloadAction<Array<Post>>) => {
            state.posts = [...state.posts, ...action.payload];
        },
        // builder
        //     .addCase(fetchPostsThunk, (state, action) => {
        //         state.isLoading = false;
        //         state.posts = action.payload;
        //     });
        // .addCase(incrementAsync.pending, (state) => {
        //     state.status = 'loading';
        // })
        // .addCase(incrementAsync.fulfilled, (state, action) => {
        //     state.status = 'idle';
        //     state.value += action.payload;
        // });
    },
});

export const {
    setIsLoading,
    setPostsList,
    setUsersList,
    setPostCommentsList,
    setUserPostsList,
} = usersSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.users.value)`
// export const selectCount = (state: RootState) => state.users.value;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//     dispatch,
//     getState
// ) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default usersSlice.reducer;
